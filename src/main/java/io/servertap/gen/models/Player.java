/*
 * ServerTap API
 * ServerTap is a REST API for Bukkit/Spigot/PaperMC Minecraft servers.
 *
 * OpenAPI spec version: 1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.servertap.gen.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * An online player
 */
@Schema(description = "An online player")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-09T22:21:31.927-05:00[America/Toronto]")
public class Player {
  @SerializedName("uuid")
  private String uuid = null;

  @SerializedName("displayName")
  private String displayName = null;

  @SerializedName("address")
  private String address = null;

  @SerializedName("port")
  private Integer port = null;

  @SerializedName("exhaustion")
  private Float exhaustion = null;

  @SerializedName("exp")
  private Float exp = null;

  @SerializedName("whitelisted")
  private Boolean whitelisted = null;

  @SerializedName("banned")
  private Boolean banned = null;

  @SerializedName("op")
  private Boolean op = null;

  public Player uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * The Player&#x27;s UUID
   * @return uuid
  **/
  @Schema(required = true, description = "The Player's UUID")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public Player displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The Player&#x27;s display name
   * @return displayName
  **/
  @Schema(description = "The Player's display name")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public Player address(String address) {
    this.address = address;
    return this;
  }

   /**
   * The address the Player is connected from (usually an IP)
   * @return address
  **/
  @Schema(description = "The address the Player is connected from (usually an IP)")
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public Player port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * The port the Player is connected from
   * @return port
  **/
  @Schema(description = "The port the Player is connected from")
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }

  public Player exhaustion(Float exhaustion) {
    this.exhaustion = exhaustion;
    return this;
  }

   /**
   * Current exhaustion level
   * @return exhaustion
  **/
  @Schema(description = "Current exhaustion level")
  public Float getExhaustion() {
    return exhaustion;
  }

  public void setExhaustion(Float exhaustion) {
    this.exhaustion = exhaustion;
  }

  public Player exp(Float exp) {
    this.exp = exp;
    return this;
  }

   /**
   * Current exp towards next level
   * @return exp
  **/
  @Schema(description = "Current exp towards next level")
  public Float getExp() {
    return exp;
  }

  public void setExp(Float exp) {
    this.exp = exp;
  }

  public Player whitelisted(Boolean whitelisted) {
    this.whitelisted = whitelisted;
    return this;
  }

   /**
   * True if this Player is on the server&#x27;s whitelist
   * @return whitelisted
  **/
  @Schema(description = "True if this Player is on the server's whitelist")
  public Boolean isWhitelisted() {
    return whitelisted;
  }

  public void setWhitelisted(Boolean whitelisted) {
    this.whitelisted = whitelisted;
  }

  public Player banned(Boolean banned) {
    this.banned = banned;
    return this;
  }

   /**
   * True if this Player is banned
   * @return banned
  **/
  @Schema(description = "True if this Player is banned")
  public Boolean isBanned() {
    return banned;
  }

  public void setBanned(Boolean banned) {
    this.banned = banned;
  }

  public Player op(Boolean op) {
    this.op = op;
    return this;
  }

   /**
   * True if this Player is OP
   * @return op
  **/
  @Schema(description = "True if this Player is OP")
  public Boolean isOp() {
    return op;
  }

  public void setOp(Boolean op) {
    this.op = op;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Player player = (Player) o;
    return Objects.equals(this.uuid, player.uuid) &&
        Objects.equals(this.displayName, player.displayName) &&
        Objects.equals(this.address, player.address) &&
        Objects.equals(this.port, player.port) &&
        Objects.equals(this.exhaustion, player.exhaustion) &&
        Objects.equals(this.exp, player.exp) &&
        Objects.equals(this.whitelisted, player.whitelisted) &&
        Objects.equals(this.banned, player.banned) &&
        Objects.equals(this.op, player.op);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, displayName, address, port, exhaustion, exp, whitelisted, banned, op);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Player {\n");
    
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    exhaustion: ").append(toIndentedString(exhaustion)).append("\n");
    sb.append("    exp: ").append(toIndentedString(exp)).append("\n");
    sb.append("    whitelisted: ").append(toIndentedString(whitelisted)).append("\n");
    sb.append("    banned: ").append(toIndentedString(banned)).append("\n");
    sb.append("    op: ").append(toIndentedString(op)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
