/*
 * ServerTap API
 * ServerTap is a REST API for Bukkit/Spigot/PaperMC Minecraft servers.
 *
 * OpenAPI spec version: 1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.servertap.gen.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * A Minecraft world
 */
@Schema(description = "A Minecraft world")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-09T22:21:31.927-05:00[America/Toronto]")
public class World {
  @SerializedName("name")
  private String name = null;

  @SerializedName("time")
  private BigDecimal time = null;

  @SerializedName("storm")
  private Boolean storm = null;

  @SerializedName("thundering")
  private Boolean thundering = null;

  @SerializedName("generateStructures")
  private Boolean generateStructures = null;

  @SerializedName("allowAnimals")
  private Boolean allowAnimals = null;

  @SerializedName("allowMonsters")
  private Boolean allowMonsters = null;

  @SerializedName("difficulty")
  private Integer difficulty = null;

  @SerializedName("environment")
  private Integer environment = null;

  @SerializedName("seed")
  private BigDecimal seed = null;

  public World name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the world
   * @return name
  **/
  @Schema(description = "The name of the world")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public World time(BigDecimal time) {
    this.time = time;
    return this;
  }

   /**
   * The time of day
   * @return time
  **/
  @Schema(description = "The time of day")
  public BigDecimal getTime() {
    return time;
  }

  public void setTime(BigDecimal time) {
    this.time = time;
  }

  public World storm(Boolean storm) {
    this.storm = storm;
    return this;
  }

   /**
   * True if there is currently a storm
   * @return storm
  **/
  @Schema(description = "True if there is currently a storm")
  public Boolean isStorm() {
    return storm;
  }

  public void setStorm(Boolean storm) {
    this.storm = storm;
  }

  public World thundering(Boolean thundering) {
    this.thundering = thundering;
    return this;
  }

   /**
   * True if it is currently thundering
   * @return thundering
  **/
  @Schema(description = "True if it is currently thundering")
  public Boolean isThundering() {
    return thundering;
  }

  public void setThundering(Boolean thundering) {
    this.thundering = thundering;
  }

  public World generateStructures(Boolean generateStructures) {
    this.generateStructures = generateStructures;
    return this;
  }

   /**
   * True if the world can generate structures
   * @return generateStructures
  **/
  @Schema(description = "True if the world can generate structures")
  public Boolean isGenerateStructures() {
    return generateStructures;
  }

  public void setGenerateStructures(Boolean generateStructures) {
    this.generateStructures = generateStructures;
  }

  public World allowAnimals(Boolean allowAnimals) {
    this.allowAnimals = allowAnimals;
    return this;
  }

   /**
   * True if animals can spawn
   * @return allowAnimals
  **/
  @Schema(description = "True if animals can spawn")
  public Boolean isAllowAnimals() {
    return allowAnimals;
  }

  public void setAllowAnimals(Boolean allowAnimals) {
    this.allowAnimals = allowAnimals;
  }

  public World allowMonsters(Boolean allowMonsters) {
    this.allowMonsters = allowMonsters;
    return this;
  }

   /**
   * True if monsters can spawn
   * @return allowMonsters
  **/
  @Schema(description = "True if monsters can spawn")
  public Boolean isAllowMonsters() {
    return allowMonsters;
  }

  public void setAllowMonsters(Boolean allowMonsters) {
    this.allowMonsters = allowMonsters;
  }

  public World difficulty(Integer difficulty) {
    this.difficulty = difficulty;
    return this;
  }

   /**
   * Peaceful (0), Easy (1), Normal (2), Hard (3)
   * @return difficulty
  **/
  @Schema(description = "Peaceful (0), Easy (1), Normal (2), Hard (3)")
  public Integer getDifficulty() {
    return difficulty;
  }

  public void setDifficulty(Integer difficulty) {
    this.difficulty = difficulty;
  }

  public World environment(Integer environment) {
    this.environment = environment;
    return this;
  }

   /**
   * Overworld (0), Nether (-1), End (1)
   * @return environment
  **/
  @Schema(description = "Overworld (0), Nether (-1), End (1)")
  public Integer getEnvironment() {
    return environment;
  }

  public void setEnvironment(Integer environment) {
    this.environment = environment;
  }

  public World seed(BigDecimal seed) {
    this.seed = seed;
    return this;
  }

   /**
   * The world seed
   * @return seed
  **/
  @Schema(description = "The world seed")
  public BigDecimal getSeed() {
    return seed;
  }

  public void setSeed(BigDecimal seed) {
    this.seed = seed;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    World world = (World) o;
    return Objects.equals(this.name, world.name) &&
        Objects.equals(this.time, world.time) &&
        Objects.equals(this.storm, world.storm) &&
        Objects.equals(this.thundering, world.thundering) &&
        Objects.equals(this.generateStructures, world.generateStructures) &&
        Objects.equals(this.allowAnimals, world.allowAnimals) &&
        Objects.equals(this.allowMonsters, world.allowMonsters) &&
        Objects.equals(this.difficulty, world.difficulty) &&
        Objects.equals(this.environment, world.environment) &&
        Objects.equals(this.seed, world.seed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, time, storm, thundering, generateStructures, allowAnimals, allowMonsters, difficulty, environment, seed);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class World {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    storm: ").append(toIndentedString(storm)).append("\n");
    sb.append("    thundering: ").append(toIndentedString(thundering)).append("\n");
    sb.append("    generateStructures: ").append(toIndentedString(generateStructures)).append("\n");
    sb.append("    allowAnimals: ").append(toIndentedString(allowAnimals)).append("\n");
    sb.append("    allowMonsters: ").append(toIndentedString(allowMonsters)).append("\n");
    sb.append("    difficulty: ").append(toIndentedString(difficulty)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    seed: ").append(toIndentedString(seed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
